
##Run the following command in the Cloud Shell to create a variable to store your resource group name, and a resource group for your resources. 
#Replace <resource group name> with a name for your resource group, and <location> with the Azure region you'd like to deploy your resources in.

rg=<resource group name>

az group create --name $rg --location <location>

#Run the following command in Azure Cloud Shell to create the ERP-servers virtual network and the Applications subnet.

az network vnet create \
    --resource-group $rg \
    --name ERP-servers \
    --address-prefix 10.0.0.0/16 \
    --subnet-name Applications \
    --subnet-prefix 10.0.0.0/24

#Run the following command in Cloud Shell to create the Databases subnet.
az network vnet subnet create \
    --resource-group $rg \
    --vnet-name ERP-servers \
    --address-prefix 10.0.1.0/24 \
    --name Databases

#Run the following command in Cloud Shell to create the ERP-SERVERS-NSG network security group.

az network nsg create \
    --resource-group $rg \
    --name ERP-SERVERS-NSG

#Create virtual machines running Ubuntu
#Next, you create two virtual machines called AppServer and DataServer. You deploy AppServer to the Applications subnet, and DataServer to the Databases subnet.
#Add the virtual machine network interfaces to the ERP-SERVERS-NSG network security group. Then use these virtual machines to test your network security group.

#Run the following command in Cloud Shell to build the AppServer virtual machine. Define a <password> for the admin account.

wget -N https://raw.githubusercontent.com/MicrosoftDocs/mslearn-secure-and-isolate-with-nsg-and-service-endpoints/master/cloud-init.yml && \
az vm create \
    --resource-group $rg \
    --name AppServer \
    --vnet-name ERP-servers \
    --subnet Applications \
    --nsg ERP-SERVERS-NSG \
    --image UbuntuLTS \
    --size Standard_B1ls \
    --admin-username azureuser \
    --custom-data cloud-init.yml \
    --no-wait \
    --admin-password <password>

#Run the following command in Cloud Shell to build the DataServer virtual machine. Define a <password> for the admin account.

az vm create \
    --resource-group $rg \
    --name DataServer \
    --vnet-name ERP-servers \
    --subnet Databases \
    --nsg ERP-SERVERS-NSG \
    --size Standard_B1ls \
    --image UbuntuLTS \
    --admin-username azureuser \
    --custom-data cloud-init.yml \
    --admin-password <password>

#It can take several minutes for the virtual machines to be in a running state. 
#To confirm that the virtual machines are running, run the following command in Cloud Shell.

az vm list \
    --resource-group $rg \
    --show-details \
    --query "[*].{Name:name, Provisioned:provisioningState, Power:powerState}" \
    --output table

#Check default connectivity

# To connect to your virtual machines, use SSH directly from Cloud Shell. To do this, 
#you need the public IP addresses that have been assigned to your virtual machines. 
#Run the following command in Cloud Shell to list the IP addresses that you'll use to connect to the virtual machines

az vm list \
    --resource-group $rg \
    --show-details \
    --query "[*].{Name:name, PrivateIP:privateIps, PublicIP:publicIps}" \
    --output table

#To make it easier to connect to your virtual machines during the rest of this exercise, assign the public IP addresses to variables. 
#Run the following command in Cloud Shell to save the public IP address of AppServer and DataServer to a variable.

APPSERVERIP="$(az vm list-ip-addresses \
                 --resource-group $rg \
                 --name AppServer \
                 --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
                 --output tsv)"

DATASERVERIP="$(az vm list-ip-addresses \
                 --resource-group $rg \
                 --name DataServer \
                 --query "[].virtualMachine.network.publicIpAddresses[*].ipAddress" \
                 --output tsv)"
#Create a security rule for SSH

az network nsg rule create \
    --resource-group $rg \
    --nsg-name ERP-SERVERS-NSG \
    --name AllowSSHRule \
    --direction Inbound \
    --priority 100 \
    --source-address-prefixes '*' \
    --source-port-ranges '*' \
    --destination-address-prefixes '*' \
    --destination-port-ranges 22 \
    --access Allow \
    --protocol Tcp \
    --description "Allow inbound SSH"


## Create a security rule to prevent web access
  #Now add a rule so that AppServer can communicate with DataServer over HTTP, 
  #but DataServer can't communicate with AppServer over HTTP. These are the internal IP addresses for these servers:

az network nsg rule create \
    --resource-group $rg \
    --nsg-name ERP-SERVERS-NSG \
    --name httpRule \
    --direction Inbound \
    --priority 150 \
    --source-address-prefixes 10.0.1.4 \
    --source-port-ranges '*' \
    --destination-address-prefixes 10.0.0.4 \
    --destination-port-ranges 80 \
    --access Deny \
    --protocol Tcp \
    --description "Deny from DataServer to AppServer on port 80"


#Deploy an application security group
  ##Run the following command in Cloud Shell to create a new application security group called ERP-DB-SERVERS-ASG

az network asg create \
    --resource-group $rg \
    --name ERP-DB-SERVERS-ASG

 ##Run the following command in Cloud Shell to associate DataServer with the application security group.

    az network nic ip-config update \
    --resource-group $rg \
    --application-security-groups ERP-DB-SERVERS-ASG \
    --name ipconfigDataServer \
    --nic-name DataServerVMNic \
    --vnet-name ERP-servers \
    --subnet Databases

    ##Run the following command in Cloud Shell to update the HTTP rule in the ERP-SERVERS-NSG network security group. 
    #It should reference the ERP-DB-Servers application security group.
  
  az network nsg rule update \
    --resource-group $rg \
    --nsg-name ERP-SERVERS-NSG \
    --name httpRule \
    --direction Inbound \
    --priority 150 \
    --source-address-prefixes "" \
    --source-port-ranges '*' \
    --source-asgs ERP-DB-SERVERS-ASG \
    --destination-address-prefixes 10.0.0.4 \
    --destination-port-ranges 80 \
    --access Deny \
    --protocol Tcp \
    --description "Deny from DataServer to AppServer on port 80 using application security group"



#Test the updated HTTP security rule
#Run the following command in Cloud Shell to connect to your AppServer virtual machine, and check if AppServer can communicate with DataServer over HTTP.

#ssh -t azureuser@$APPSERVERIP 'wget http://10.0.1.4; exit; bash'
#Enter the password you used when you created the virtual machine.

#As before, the response should include a 200 OK message. The application security group settings can take a minute or two to take effect.
 #If you don't initially receive the 200 OK message, wait a minute and try again.

#Run the following command in Cloud Shell to connect to your DataServer virtual machine, and check if DataServer can communicate with AppServer over HTTP.


#ssh -t azureuser@$DATASERVERIP 'wget http://10.0.0.4; exit; bash'
#Enter the password you used when you created the virtual machine.

#As before, this shouldn't succeed, because you've blocked access over port 80. After several minutes, you should g
#et a Connection timed out message. Press Ctrl+C to stop the command prior to the timeout.

#You've now confirmed that your network security group rule works using an application security group, in the same way as when you used a source IP address. 
#If we were to add additional data servers, we can easily ensure they have the proper network security by adding the new servers to the ERP-DB-SERVERS-ASG.




